/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: santy (https://sketchfab.com/Santy)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/camera-canon-eos-400d-c8c3f307e93f4c829d579d1b369e6b02
Title: Camera CANON EOS 400D
*/
import * as THREE from "three";
import React, { useRef, useEffect, useState, useCallback } from "react";
import { useGLTF, Html, useTexture, Text } from "@react-three/drei";
import { Select } from "@react-three/postprocessing";
import { debounce } from "lodash";
function Model(props) {
  const ref = useRef();
  const { nodes, materials } = useGLTF("/models/camera_canon_eos_400d.glb");
  const texture = useTexture(props.item.img);
  const [hovered, hover] = useState(null);
  /* console.log(hovered); */

  const debouncedHover = useCallback(debounce(hover, 30), []);
  const over = (name) => (e) => (e.stopPropagation(), debouncedHover(name));

  useEffect(() => {
    Object.entries(materials).map((material) => {
      if (
        material[0] !== "zFdeDaGNRwzccye" &&
        material[0] !== "ujsvqBWRMnqdwPx" &&
        material[0] !== "hUlRcbieVuIiOXG" &&
        material[0] !== "jlzuBkUzuJqgiAK" &&
        material[0] !== "xNrofRCqOXXHVZt"
      ) {
        material[1].color = new THREE.Color(props.item.color[0]);
      }
      material[1].needsUpdate = true;
    });
  }, [materials, props.item]);

  return (
    <>
      <group {...props} dispose={null} scale={0.6}>
        <meshStandardMaterial roughness={1} map={texture} />

        <Select
          enabled={hovered === "Obiectivul"}
          onPointerOver={over("Obiectivul")}
          onPointerOut={() => debouncedHover(null)}>
          <group position={[0, 0, -0.009]} scale={0.929}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.cilindro_low1_Cilindro_material_0.geometry}
              material={materials.Cilindro_material}>
              {/* <meshStandardMaterial roughness={1} map={texture} /> */}
            </mesh>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.cilindro_low1_lambert3_0.geometry}
              material={materials.lambert3}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.cilindro_low1_lambert1_0.geometry}
              material={materials.lambert1}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.cilindro_low1_lambert4_0.geometry}
              material={materials.lambert4}
            />
          </group>
        </Select>
        <Select
          enabled={hovered === "LCD Display"}
          onPointerOver={over("LCD Display")}
          onPointerOut={() => debouncedHover(null)}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Mid_2_Camara_material_0.geometry}
            material={materials.Camara_material}
            position={[0, 0, -0.69]}
            scale={[2.022, 1.969, 1.256]}></mesh>
        </Select>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.pCylinder9_ruleta__0.geometry}
          material={materials.ruleta}
          position={[-1.129, 1.083, -0.797]}
          rotation={[-0.001, 0.019, 0.24]}
          scale={[0.315, 0.054, 0.315]}></mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.pCylinder8_ruleta_2_0.geometry}
          material={materials.ruleta_2}
          position={[-1.627, 0.788, 0.085]}
          rotation={[1.56, 0.012, -0.041]}
          scale={[0.184, 0.029, 0.184]}></mesh>
      </group>
      <Html
        position={[2, 1.25, 0]}
        color="white"
        fontSize={0.15}
        letterSpacing={-0.05}>
        {hovered ? hovered : ""}
      </Html>
    </>
  );
}

export default Model;

useGLTF.preload("/models/camera_canon_eos_400d.glb");
